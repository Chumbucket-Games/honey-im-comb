//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Scripts/Input System/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Common Controls"",
            ""id"": ""019747f0-e0c6-47af-9cbe-0de1ff25020d"",
            ""actions"": [
                {
                    ""name"": ""Pan Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""31387cf6-5189-4783-988c-45ecaf521bbe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pan Keyboard"",
                    ""type"": ""Value"",
                    ""id"": ""a5bbbe9e-6789-4e48-9a28-ec2f4249e88d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""37e04113-c019-4080-8403-841a95ecfc6d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Toggle Map Mode"",
                    ""type"": ""Button"",
                    ""id"": ""651fefae-c68d-419b-a1e0-cb593c7cbc09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89d60ab7-ccae-4b1c-95fa-af8858f68381"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""881bd941-8be4-4d14-9501-397f9ffce797"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""57e89b22-037d-41da-9d94-2a1e22c9f858"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan Keyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3d6d29b-3658-40d5-922e-c6d03ddd6c71"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""be4b9a29-a17c-4361-a0a0-e6501179fa32"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e47c2f92-d430-4369-ab45-282b26466fff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fd1c3b23-ad5e-4217-83e7-44c286e1546c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan Keyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fb45fe34-8450-4a1c-8211-7c5b495d308d"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Map Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Unit Management"",
            ""id"": ""2588d7e9-7e12-4f1d-948b-347f16206ce9"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""e0580b16-29f3-412b-9e3a-f848dcb03a3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""f2d0763f-8fa3-4705-9509-876c965f6385"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""52073590-efc7-4738-84a1-64248d626c79"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3038f30d-5a8e-41e1-b006-a9c49d316071"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa07b537-809a-401b-a352-b5fd66a39ad1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9015d24c-e1ae-495d-a511-b0ca83564f2f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hive Management"",
            ""id"": ""c5600613-ee62-4abe-9879-e240dd092dc4"",
            ""actions"": [
                {
                    ""name"": ""Build Wall"",
                    ""type"": ""Button"",
                    ""id"": ""2074eea3-6bbb-4c6a-8278-ba9fce13fc15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Build Storeroom"",
                    ""type"": ""Button"",
                    ""id"": ""d4862257-cd0e-4a19-aada-cad0ef608502"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Build Barracks"",
                    ""type"": ""Button"",
                    ""id"": ""e2acc15a-4a70-495b-b761-a3ca42882f79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Build Laboratory"",
                    ""type"": ""Button"",
                    ""id"": ""15e970dc-f592-4d9d-92ac-d11b49f3222e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Build Sentry"",
                    ""type"": ""Button"",
                    ""id"": ""2ed4f00c-ed61-4509-8fed-85f89eae7074"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Build Throne"",
                    ""type"": ""Button"",
                    ""id"": ""92d60eec-a666-479f-8bba-8efe6f8c72dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Place Building"",
                    ""type"": ""Button"",
                    ""id"": ""ff0e0b26-efad-44bf-918c-a29bf8622a44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel Build"",
                    ""type"": ""Button"",
                    ""id"": ""d692edf6-b752-4eae-b724-962e42b7c6fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""40b71a5a-bc3e-439d-ae1d-9eefa338eb87"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f14cd3ce-1120-441e-9a30-360a53146422"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build Wall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ffb6e95-d7bf-470e-a701-e20ca6f47d94"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build Storeroom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2271ba05-f183-4b2f-a766-e5aa64c7605c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build Barracks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""439b1ee2-a30e-4933-8d31-f1457c6b7de5"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build Laboratory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c79b5955-d7da-4439-aadd-6895e4bc9023"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build Sentry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5281152-99af-4d39-be5b-b4f1ffec40ff"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build Throne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d424bf-4dba-4e5d-a0aa-81c8c6135be2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Building"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d44a4dcf-6b67-4774-adf3-e1d18e9f6445"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel Build"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abf1ef0c-ae55-480d-82ae-f77704047f04"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Common Controls
        m_CommonControls = asset.FindActionMap("Common Controls", throwIfNotFound: true);
        m_CommonControls_PanMouse = m_CommonControls.FindAction("Pan Mouse", throwIfNotFound: true);
        m_CommonControls_PanKeyboard = m_CommonControls.FindAction("Pan Keyboard", throwIfNotFound: true);
        m_CommonControls_Zoom = m_CommonControls.FindAction("Zoom", throwIfNotFound: true);
        m_CommonControls_ToggleMapMode = m_CommonControls.FindAction("Toggle Map Mode", throwIfNotFound: true);
        // Unit Management
        m_UnitManagement = asset.FindActionMap("Unit Management", throwIfNotFound: true);
        m_UnitManagement_Interact = m_UnitManagement.FindAction("Interact", throwIfNotFound: true);
        m_UnitManagement_Select = m_UnitManagement.FindAction("Select", throwIfNotFound: true);
        m_UnitManagement_Cursor = m_UnitManagement.FindAction("Cursor", throwIfNotFound: true);
        // Hive Management
        m_HiveManagement = asset.FindActionMap("Hive Management", throwIfNotFound: true);
        m_HiveManagement_BuildWall = m_HiveManagement.FindAction("Build Wall", throwIfNotFound: true);
        m_HiveManagement_BuildStoreroom = m_HiveManagement.FindAction("Build Storeroom", throwIfNotFound: true);
        m_HiveManagement_BuildBarracks = m_HiveManagement.FindAction("Build Barracks", throwIfNotFound: true);
        m_HiveManagement_BuildLaboratory = m_HiveManagement.FindAction("Build Laboratory", throwIfNotFound: true);
        m_HiveManagement_BuildSentry = m_HiveManagement.FindAction("Build Sentry", throwIfNotFound: true);
        m_HiveManagement_BuildThrone = m_HiveManagement.FindAction("Build Throne", throwIfNotFound: true);
        m_HiveManagement_PlaceBuilding = m_HiveManagement.FindAction("Place Building", throwIfNotFound: true);
        m_HiveManagement_CancelBuild = m_HiveManagement.FindAction("Cancel Build", throwIfNotFound: true);
        m_HiveManagement_Cursor = m_HiveManagement.FindAction("Cursor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Common Controls
    private readonly InputActionMap m_CommonControls;
    private ICommonControlsActions m_CommonControlsActionsCallbackInterface;
    private readonly InputAction m_CommonControls_PanMouse;
    private readonly InputAction m_CommonControls_PanKeyboard;
    private readonly InputAction m_CommonControls_Zoom;
    private readonly InputAction m_CommonControls_ToggleMapMode;
    public struct CommonControlsActions
    {
        private @PlayerControls m_Wrapper;
        public CommonControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PanMouse => m_Wrapper.m_CommonControls_PanMouse;
        public InputAction @PanKeyboard => m_Wrapper.m_CommonControls_PanKeyboard;
        public InputAction @Zoom => m_Wrapper.m_CommonControls_Zoom;
        public InputAction @ToggleMapMode => m_Wrapper.m_CommonControls_ToggleMapMode;
        public InputActionMap Get() { return m_Wrapper.m_CommonControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICommonControlsActions instance)
        {
            if (m_Wrapper.m_CommonControlsActionsCallbackInterface != null)
            {
                @PanMouse.started -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnPanMouse;
                @PanMouse.performed -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnPanMouse;
                @PanMouse.canceled -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnPanMouse;
                @PanKeyboard.started -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnPanKeyboard;
                @PanKeyboard.performed -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnPanKeyboard;
                @PanKeyboard.canceled -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnPanKeyboard;
                @Zoom.started -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnZoom;
                @ToggleMapMode.started -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnToggleMapMode;
                @ToggleMapMode.performed -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnToggleMapMode;
                @ToggleMapMode.canceled -= m_Wrapper.m_CommonControlsActionsCallbackInterface.OnToggleMapMode;
            }
            m_Wrapper.m_CommonControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PanMouse.started += instance.OnPanMouse;
                @PanMouse.performed += instance.OnPanMouse;
                @PanMouse.canceled += instance.OnPanMouse;
                @PanKeyboard.started += instance.OnPanKeyboard;
                @PanKeyboard.performed += instance.OnPanKeyboard;
                @PanKeyboard.canceled += instance.OnPanKeyboard;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @ToggleMapMode.started += instance.OnToggleMapMode;
                @ToggleMapMode.performed += instance.OnToggleMapMode;
                @ToggleMapMode.canceled += instance.OnToggleMapMode;
            }
        }
    }
    public CommonControlsActions @CommonControls => new CommonControlsActions(this);

    // Unit Management
    private readonly InputActionMap m_UnitManagement;
    private IUnitManagementActions m_UnitManagementActionsCallbackInterface;
    private readonly InputAction m_UnitManagement_Interact;
    private readonly InputAction m_UnitManagement_Select;
    private readonly InputAction m_UnitManagement_Cursor;
    public struct UnitManagementActions
    {
        private @PlayerControls m_Wrapper;
        public UnitManagementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_UnitManagement_Interact;
        public InputAction @Select => m_Wrapper.m_UnitManagement_Select;
        public InputAction @Cursor => m_Wrapper.m_UnitManagement_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_UnitManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitManagementActions set) { return set.Get(); }
        public void SetCallbacks(IUnitManagementActions instance)
        {
            if (m_Wrapper.m_UnitManagementActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnInteract;
                @Select.started -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnSelect;
                @Cursor.started -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnCursor;
                @Cursor.performed -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnCursor;
                @Cursor.canceled -= m_Wrapper.m_UnitManagementActionsCallbackInterface.OnCursor;
            }
            m_Wrapper.m_UnitManagementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cursor.started += instance.OnCursor;
                @Cursor.performed += instance.OnCursor;
                @Cursor.canceled += instance.OnCursor;
            }
        }
    }
    public UnitManagementActions @UnitManagement => new UnitManagementActions(this);

    // Hive Management
    private readonly InputActionMap m_HiveManagement;
    private IHiveManagementActions m_HiveManagementActionsCallbackInterface;
    private readonly InputAction m_HiveManagement_BuildWall;
    private readonly InputAction m_HiveManagement_BuildStoreroom;
    private readonly InputAction m_HiveManagement_BuildBarracks;
    private readonly InputAction m_HiveManagement_BuildLaboratory;
    private readonly InputAction m_HiveManagement_BuildSentry;
    private readonly InputAction m_HiveManagement_BuildThrone;
    private readonly InputAction m_HiveManagement_PlaceBuilding;
    private readonly InputAction m_HiveManagement_CancelBuild;
    private readonly InputAction m_HiveManagement_Cursor;
    public struct HiveManagementActions
    {
        private @PlayerControls m_Wrapper;
        public HiveManagementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BuildWall => m_Wrapper.m_HiveManagement_BuildWall;
        public InputAction @BuildStoreroom => m_Wrapper.m_HiveManagement_BuildStoreroom;
        public InputAction @BuildBarracks => m_Wrapper.m_HiveManagement_BuildBarracks;
        public InputAction @BuildLaboratory => m_Wrapper.m_HiveManagement_BuildLaboratory;
        public InputAction @BuildSentry => m_Wrapper.m_HiveManagement_BuildSentry;
        public InputAction @BuildThrone => m_Wrapper.m_HiveManagement_BuildThrone;
        public InputAction @PlaceBuilding => m_Wrapper.m_HiveManagement_PlaceBuilding;
        public InputAction @CancelBuild => m_Wrapper.m_HiveManagement_CancelBuild;
        public InputAction @Cursor => m_Wrapper.m_HiveManagement_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_HiveManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HiveManagementActions set) { return set.Get(); }
        public void SetCallbacks(IHiveManagementActions instance)
        {
            if (m_Wrapper.m_HiveManagementActionsCallbackInterface != null)
            {
                @BuildWall.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildWall;
                @BuildWall.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildWall;
                @BuildWall.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildWall;
                @BuildStoreroom.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildStoreroom;
                @BuildStoreroom.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildStoreroom;
                @BuildStoreroom.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildStoreroom;
                @BuildBarracks.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildBarracks;
                @BuildBarracks.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildBarracks;
                @BuildBarracks.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildBarracks;
                @BuildLaboratory.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildLaboratory;
                @BuildLaboratory.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildLaboratory;
                @BuildLaboratory.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildLaboratory;
                @BuildSentry.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildSentry;
                @BuildSentry.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildSentry;
                @BuildSentry.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildSentry;
                @BuildThrone.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildThrone;
                @BuildThrone.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildThrone;
                @BuildThrone.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnBuildThrone;
                @PlaceBuilding.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnPlaceBuilding;
                @PlaceBuilding.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnPlaceBuilding;
                @PlaceBuilding.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnPlaceBuilding;
                @CancelBuild.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnCancelBuild;
                @CancelBuild.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnCancelBuild;
                @CancelBuild.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnCancelBuild;
                @Cursor.started -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnCursor;
                @Cursor.performed -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnCursor;
                @Cursor.canceled -= m_Wrapper.m_HiveManagementActionsCallbackInterface.OnCursor;
            }
            m_Wrapper.m_HiveManagementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BuildWall.started += instance.OnBuildWall;
                @BuildWall.performed += instance.OnBuildWall;
                @BuildWall.canceled += instance.OnBuildWall;
                @BuildStoreroom.started += instance.OnBuildStoreroom;
                @BuildStoreroom.performed += instance.OnBuildStoreroom;
                @BuildStoreroom.canceled += instance.OnBuildStoreroom;
                @BuildBarracks.started += instance.OnBuildBarracks;
                @BuildBarracks.performed += instance.OnBuildBarracks;
                @BuildBarracks.canceled += instance.OnBuildBarracks;
                @BuildLaboratory.started += instance.OnBuildLaboratory;
                @BuildLaboratory.performed += instance.OnBuildLaboratory;
                @BuildLaboratory.canceled += instance.OnBuildLaboratory;
                @BuildSentry.started += instance.OnBuildSentry;
                @BuildSentry.performed += instance.OnBuildSentry;
                @BuildSentry.canceled += instance.OnBuildSentry;
                @BuildThrone.started += instance.OnBuildThrone;
                @BuildThrone.performed += instance.OnBuildThrone;
                @BuildThrone.canceled += instance.OnBuildThrone;
                @PlaceBuilding.started += instance.OnPlaceBuilding;
                @PlaceBuilding.performed += instance.OnPlaceBuilding;
                @PlaceBuilding.canceled += instance.OnPlaceBuilding;
                @CancelBuild.started += instance.OnCancelBuild;
                @CancelBuild.performed += instance.OnCancelBuild;
                @CancelBuild.canceled += instance.OnCancelBuild;
                @Cursor.started += instance.OnCursor;
                @Cursor.performed += instance.OnCursor;
                @Cursor.canceled += instance.OnCursor;
            }
        }
    }
    public HiveManagementActions @HiveManagement => new HiveManagementActions(this);
    public interface ICommonControlsActions
    {
        void OnPanMouse(InputAction.CallbackContext context);
        void OnPanKeyboard(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnToggleMapMode(InputAction.CallbackContext context);
    }
    public interface IUnitManagementActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
    }
    public interface IHiveManagementActions
    {
        void OnBuildWall(InputAction.CallbackContext context);
        void OnBuildStoreroom(InputAction.CallbackContext context);
        void OnBuildBarracks(InputAction.CallbackContext context);
        void OnBuildLaboratory(InputAction.CallbackContext context);
        void OnBuildSentry(InputAction.CallbackContext context);
        void OnBuildThrone(InputAction.CallbackContext context);
        void OnPlaceBuilding(InputAction.CallbackContext context);
        void OnCancelBuild(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
    }
}
